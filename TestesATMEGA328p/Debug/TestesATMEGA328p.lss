
TestesATMEGA328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a16  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047d  00000000  00000000  0000150d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045d  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  9e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pinConfig>:

void setDC(float perc)
{
	float DC =  (((float)ICR1/(float)100.0) *  perc);
	OCR1A = (uint16_t) DC;
}
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	8c e3       	ldi	r24, 0x3C	; 60
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	8e ef       	ldi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	08 95       	ret

000000b4 <timerConfig>:
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	84 bd       	out	0x24, r24	; 36
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 bd       	out	0x25, r24	; 37
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
  ca:	16 bc       	out	0x26, r1	; 38
  cc:	8b e9       	ldi	r24, 0x9B	; 155
  ce:	88 bd       	out	0x28, r24	; 40
  d0:	08 95       	ret

000000d2 <setPWM>:
  d2:	e0 e8       	ldi	r30, 0x80	; 128
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	82 68       	ori	r24, 0x82	; 130
  da:	80 83       	st	Z, r24
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	89 61       	ori	r24, 0x19	; 25
  e4:	80 83       	st	Z, r24
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	93 e0       	ldi	r25, 0x03	; 3
  ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  f2:	08 95       	ret

000000f4 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  f4:	e0 ec       	ldi	r30, 0xC0	; 192
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	95 ff       	sbrs	r25, 5
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 102:	08 95       	ret

00000104 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{ // function responsible to set up RX and TX communication
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8); //sets the baud rate value
 104:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0); // register enables RX and TX and also their respective interrupts
 10c:	88 ed       	ldi	r24, 0xD8	; 216
 10e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 118:	08 95       	ret

0000011a <adc_setup>:
}

void adc_setup()
{
	ADMUX |= (1<<REFS0)|(0<<REFS1);//Enables VCC as ref voltage also selects ADC2 analog channel
 11a:	ec e7       	ldi	r30, 0x7C	; 124
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //enables ADC, starts conversion, auto trigger enabled, ADC presacler set to 128
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8f 6e       	ori	r24, 0xEF	; 239
 12c:	80 83       	st	Z, r24
	
	ADCSRB |= (0<<ADTS0)|(0<<ADTS1)|(0<<ADTS2); // trigger set for free running mode
 12e:	eb e7       	ldi	r30, 0x7B	; 123
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <__vector_15>:
#include "adc_to_temp.h"

volatile uint8_t count=0;

ISR(TIMER0_COMPB_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
	count++;
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <main>:


int main(void)
{
    /* Replace with your application code */
    pinConfig();
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <pinConfig>
	timerConfig();
 15e:	0e 94 5a 00 	call	0xb4	; 0xb4 <timerConfig>
	USART_Init(MYUBRR);	
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 82 00 	call	0x104	; 0x104 <USART_Init>
	setPWM();
 16a:	0e 94 69 00 	call	0xd2	; 0xd2 <setPWM>
	//setDC(50.25);
	adc_setup();
 16e:	0e 94 8d 00 	call	0x11a	; 0x11a <adc_setup>
	sei();
 172:	78 94       	sei
	SEGA_ON; SEGB_ON; SEGC_ON; SEGD_ON; SEGE_ON ; SEGF_ON; 
 174:	5a 98       	cbi	0x0b, 2	; 11
 176:	5b 98       	cbi	0x0b, 3	; 11
 178:	5c 98       	cbi	0x0b, 4	; 11
 17a:	5d 98       	cbi	0x0b, 5	; 11
 17c:	45 98       	cbi	0x08, 5	; 8
 17e:	44 98       	cbi	0x08, 4	; 8
	SEGG_OFF; DP_OFF; 
 180:	43 9a       	sbi	0x08, 3	; 8
 182:	42 9a       	sbi	0x08, 2	; 8
	DISP1_OFF; DISP2_OFF; DISP3_OFF;
 184:	5e 9a       	sbi	0x0b, 6	; 11
 186:	28 9a       	sbi	0x05, 0	; 5
 188:	5f 9a       	sbi	0x0b, 7	; 11
	while (1) 
    {
		//floatoa_(5);
		//intoa_(5);
		//printToSerialPort();
		if(count == 100)
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 18e:	84 36       	cpi	r24, 0x64	; 100
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x30>
		{
			USART_Transmit('F');
 192:	86 e4       	ldi	r24, 0x46	; 70
 194:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_Transmit>
			count=0;
 198:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 19c:	f6 cf       	rjmp	.-20     	; 0x18a <main+0x30>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
